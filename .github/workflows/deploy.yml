name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add droplet host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p 22 ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote directory exists
        run: ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "mkdir -p '${{ secrets.REMOTE_DIR }}' '${{ secrets.REMOTE_DIR }}/data'"

      - name: Rsync repo to droplet (preserve server data/)
        run: |
          rsync -az --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'data/' \
            ./  "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/"

      # Create a temp .env on the runner from the secret (NOT committed), then upload it
      - name: Prepare .env from ENV_FILE (runner only)
        run: |
          printf "%s" "${{ secrets.ENV_FILE }}" > .env.deploy

      - name: Upload .env to server
        run: |
          scp .env.deploy "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/.env"
          rm -f .env.deploy

      - name: Install deps & (re)start with PM2
        run: |
          ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "bash -lc '
            set -euo pipefail
            [ -f ~/.profile ] && . ~/.profile || true
            [ -f ~/.bashrc ] && . ~/.bashrc || true

            APP_DIR=\"${{ secrets.REMOTE_DIR }}\"
            APP_NAME=\$(basename \"$APP_DIR\")
            echo \"APP_DIR=\$APP_DIR\"
            echo \"APP_NAME=\$APP_NAME\"

            # Show what rsync actually put there
            ls -la \"\$APP_DIR\" || true

            cd \"\$APP_DIR\"

            # Guard: make sure we are in the app folder
            if [ ! -f package.json ]; then
              echo \"❌ package.json not found in \$APP_DIR\" >&2
              echo \"   Did you set REMOTE_DIR to /home/app/apps/invoice-review-incoming ?\" >&2
              exit 2
            fi

            export NPM_CONFIG_FUND=false
            if [ ! -f package-lock.json ]; then
              npm install --package-lock-only
            fi
            npm ci --omit=dev

            PM2=\$(command -v pm2 || true)
            if [ -z \"$PM2\" ]; then
              echo \"pm2 not found on PATH for user \$USER\" >&2; exit 1
            fi

            if pm2 list | grep -Eq \"^[[:space:]]*\$APP_NAME[[:space:]]\"; then
              pm2 reload \"\$APP_NAME\" --update-env
            else
              pm2 start index.js --name \"\$APP_NAME\"
            fi

            pm2 save
          '"