name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add droplet host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p 22 ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote directory exists
        run: ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "mkdir -p '${{ secrets.REMOTE_DIR }}' '${{ secrets.REMOTE_DIR }}/data'"

      - name: Rsync repo to droplet (preserve server data/)
        run: |
          rsync -az --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'data/' \
            ./  "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/"

      # Create a temp .env on the runner from the secret (NOT committed), then upload it
      - name: Prepare .env from ENV_FILE (runner only)
        run: |
          printf "%s" "${{ secrets.ENV_FILE }}" > .env.deploy

      - name: Upload .env to server
        run: |
          scp .env.deploy "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/.env"
          rm -f .env.deploy

      - name: Install deps & (re)start with PM2
        run: |
          ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "bash -lc '
            set -euo pipefail
            # Make env look like an interactive login
            [ -f ~/.profile ] && . ~/.profile || true
            [ -f ~/.bashrc ] && . ~/.bashrc || true
            [ -f ~/.nvm/nvm.sh ] && . ~/.nvm/nvm.sh || true

            # Normalize APP_DIR and derive APP_NAME
            APP_DIR=\"${{ secrets.REMOTE_DIR }}\"
            APP_DIR=\"${APP_DIR%/}\"             # strip any trailing /
            APP_NAME=\"\$(basename \"\$APP_DIR\")\"
            cd \"\$APP_DIR\"

            # Fallback: if APP_NAME empty (edge cases), read from package.json
            if [ -z \"\$APP_NAME\" ]; then
              if command -v node >/dev/null 2>&1 && [ -f package.json ]; then
                APP_NAME=\"\$(node -e \"console.log(require('./package.json').name || '')\")\"
              fi
            fi
            if [ -z \"\$APP_NAME\" ]; then
              echo \"❌ Could not determine APP_NAME from REMOTE_DIR or package.json\" >&2
              exit 3
            fi

            echo \"APP_DIR=\$APP_DIR\"
            echo \"APP_NAME=\$APP_NAME\"
            echo \"Listing contents of APP_DIR:\"
            ls -la

            # Ensure data dir exists (we preserve it during rsync)
            mkdir -p data

            # Ensure .env is present (uploaded in prior step)
            if [ ! -f .env ]; then
              echo \"❌ .env not found in \$APP_DIR (ENV_FILE upload step failed?)\" >&2
              exit 4
            fi

            # Install production deps
            export NPM_CONFIG_FUND=false
            if [ ! -f package-lock.json ]; then
              npm install --package-lock-only
            fi
            npm ci --omit=dev

            # Find or install pm2, then use its absolute path
            PM2_PATH=\"\"
            if command -v pm2 >/dev/null 2>&1; then
              PM2_PATH=\"\$(command -v pm2)\"
            else
              echo \"pm2 not found; installing globally...\"
              npm i -g pm2 >/dev/null 2>&1 || npm i -g pm2
              if command -v pm2 >/dev/null 2>&1; then
                PM2_PATH=\"\$(command -v pm2)\"
              else
                # Try common nvm/global locations
                for p in \"\$HOME/.npm-global/bin/pm2\" \"\$HOME/.nvm/versions/node\"/*\"/bin/pm2\" \"/usr/local/bin/pm2\" \"/usr/bin/pm2\"; do
                  [ -x \"\$p\" ] && PM2_PATH=\"\$p\" && break
                done
              fi
            fi
            if [ -z \"\$PM2_PATH\" ]; then
              echo \"❌ Could not locate pm2 after install\" >&2
              exit 5
            fi
            echo \"Using PM2 at: \$PM2_PATH\"

            # Start or reload under fixed name
            if \"\$PM2_PATH\" list | grep -Eq \"^[[:space:]]*\$APP_NAME[[:space:]]\"; then
              \"\$PM2_PATH\" reload \"\$APP_NAME\" --update-env
            else
              \"\$PM2_PATH\" start index.js --name \"\$APP_NAME\"
            fi

            \"\$PM2_PATH\" save
          '"